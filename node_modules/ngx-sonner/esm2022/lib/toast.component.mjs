import { NgComponentOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, computed, effect, input, signal, untracked, viewChild, } from '@angular/core';
import { cn } from './internal/cn';
import { defaultClasses, GAP, SWIPE_THRESHOLD, TIME_BEFORE_UNMOUNT, TOAST_LIFETIME, } from './internal/constants';
import { AsComponentPipe } from './pipes/as-component.pipe';
import { IsStringPipe } from './pipes/is-string.pipe';
import { toastState } from './state';
import * as i0 from "@angular/core";
export class ToastComponent {
    constructor() {
        this.cn = cn;
        this.toasts = toastState.toasts;
        this.heights = toastState.heights;
        this.removeHeight = toastState.removeHeight;
        this.addHeight = toastState.addHeight;
        this.dismiss = toastState.dismiss;
        this.toast = input.required();
        this.index = input.required();
        this.expanded = input.required();
        this._invert = input.required({ alias: 'invert' });
        this.position = input.required();
        this.visibleToasts = input.required();
        this.expandByDefault = input.required();
        this._closeButton = input.required({
            alias: 'closeButton',
        });
        this.interacting = input.required();
        this.cancelButtonStyle = input();
        this.actionButtonStyle = input();
        this.duration = input(TOAST_LIFETIME);
        this.descriptionClass = input('');
        this._classes = input({}, { alias: 'classes' });
        this.unstyled = input(false);
        this._class = input('', { alias: 'class' });
        this._style = input({}, { alias: 'style' });
        this.mounted = signal(false);
        this.removed = signal(false);
        this.swiping = signal(false);
        this.swipeOut = signal(false);
        this.offsetBeforeRemove = signal(0);
        this.initialHeight = signal(0);
        this.toastRef = viewChild.required('toastRef');
        this.classes = computed(() => ({
            ...defaultClasses,
            ...this._classes(),
        }));
        this.isFront = computed(() => this.index() === 0);
        this.isVisible = computed(() => this.index() + 1 <= this.visibleToasts());
        this.toastType = computed(() => this.toast().type ?? 'default');
        this.toastClass = computed(() => this.toast().class ?? '');
        this.toastDescriptionClass = computed(() => this.toast().descriptionClass ?? '');
        this.heightIndex = computed(() => this.heights().findIndex(height => height.toastId === this.toast().id));
        this.offset = signal(0);
        this.closeTimerStartTimeRef = 0;
        this.lastCloseTimerStartTimeRef = 0;
        this.pointerStartRef = null;
        this.coords = computed(() => this.position().split('-'));
        this.toastsHeightBefore = computed(() => this.heights().reduce((prev, curr, reducerIndex) => {
            if (reducerIndex >= this.heightIndex())
                return prev;
            return prev + curr.height;
        }, 0));
        this.invert = computed(() => this.toast().invert ?? this._invert());
        this.closeButton = computed(() => this.toast().closeButton ?? this._closeButton());
        this.disabled = computed(() => this.toastType() === 'loading');
        this.remainingTime = 0;
        this.isPromiseLoadingOrInfiniteDuration = computed(() => (this.toast().promise && this.toastType() === 'loading') ||
            this.toast().duration === Number.POSITIVE_INFINITY);
        this.toastClasses = computed(() => cn(this._class(), this.toastClass(), this.classes().toast, this.toast().classes?.toast, this.classes()[this.toastType()], this.toast().classes?.[this.toastType()]));
        this.toastStyle = computed(() => ({
            '--index': `${this.index()}`,
            '--toasts-before': `${this.index()}`,
            '--z-index': `${this.toasts().length - this.index()}`,
            '--offset': `${this.removed() ? this.offsetBeforeRemove() : this.offset()}px`,
            '--initial-height': this.expandByDefault()
                ? 'auto'
                : `${this.initialHeight()}px`,
            ...this._style(),
        }));
        effect(() => {
            const heightIndex = this.heightIndex();
            const toastsHeightBefore = this.toastsHeightBefore();
            untracked(() => this.offset.set(Math.round(heightIndex * GAP + toastsHeightBefore)));
        });
        effect(() => {
            if (this.toast().updated) {
                // if the toast has been updated after the initial render,
                // we want to reset the timer and set the remaining time to the
                // new duration
                clearTimeout(this.timeoutId);
                this.remainingTime =
                    this.toast().duration ?? this.duration() ?? TOAST_LIFETIME;
                this.startTimer();
            }
        });
        effect(onCleanup => {
            if (!this.isPromiseLoadingOrInfiniteDuration()) {
                if (this.expanded() || this.interacting()) {
                    this.pauseTimer();
                }
                else {
                    this.startTimer();
                }
            }
            onCleanup(() => clearTimeout(this.timeoutId));
        });
        effect(() => {
            if (this.toast().delete) {
                this.deleteToast();
            }
        });
    }
    ngAfterViewInit() {
        this.remainingTime =
            this.toast().duration ?? this.duration() ?? TOAST_LIFETIME;
        this.mounted.set(true);
        const height = this.toastRef().nativeElement.getBoundingClientRect().height;
        this.initialHeight.set(height);
        this.addHeight({ toastId: this.toast().id, height });
    }
    ngOnDestroy() {
        clearTimeout(this.timeoutId);
        this.removeHeight(this.toast().id);
    }
    deleteToast() {
        this.removed.set(true);
        this.offsetBeforeRemove.set(this.offset());
        this.removeHeight(this.toast().id);
        setTimeout(() => {
            this.dismiss(this.toast().id);
        }, TIME_BEFORE_UNMOUNT);
    }
    // If toast's duration changes, it will be out of sync with the
    // remainingAtTimeout, so we know we need to restart the timer
    // with the new duration
    // Pause the timer on each hover
    pauseTimer() {
        if (this.lastCloseTimerStartTimeRef < this.closeTimerStartTimeRef) {
            // Get the elapsed time since the timer started
            const elapsedTime = new Date().getTime() - this.closeTimerStartTimeRef;
            this.remainingTime = this.remainingTime - elapsedTime;
        }
        this.lastCloseTimerStartTimeRef = new Date().getTime();
    }
    startTimer() {
        this.closeTimerStartTimeRef = new Date().getTime();
        // Let the toast know it has started
        this.timeoutId = setTimeout(() => {
            this.toast().onAutoClose?.(this.toast());
            this.deleteToast();
        }, this.remainingTime);
    }
    onPointerDown(event) {
        if (this.disabled() || !this.toast().dismissible)
            return;
        this.offsetBeforeRemove.set(this.offset());
        const target = event.target;
        // Ensure we maintain correct pointer capture even when going outside the toast (e.g. when swiping)
        target.setPointerCapture(event.pointerId);
        if (target.tagName === 'BUTTON') {
            return;
        }
        this.swiping.set(true);
        this.pointerStartRef = { x: event.clientX, y: event.clientY };
    }
    onPointerUp() {
        if (this.swipeOut() || !this.toast().dismissible)
            return;
        this.pointerStartRef = null;
        const swipeAmount = Number(this.toastRef()
            .nativeElement.style.getPropertyValue('--swipe-amount')
            .replace('px', '') || 0);
        // Remove only if threshold is met
        if (Math.abs(swipeAmount) >= SWIPE_THRESHOLD) {
            this.offsetBeforeRemove.set(this.offset());
            this.toast().onDismiss?.(this.toast());
            this.deleteToast();
            this.swipeOut.set(true);
            return;
        }
        this.toastRef().nativeElement.style.setProperty('--swipe-amount', '0px');
        this.swiping.set(false);
    }
    onPointerMove(event) {
        if (!this.pointerStartRef || !this.toast().dismissible)
            return;
        const yPosition = event.clientY - this.pointerStartRef.y;
        const xPosition = event.clientX - this.pointerStartRef.x;
        const clamp = this.coords()[0] === 'top' ? Math.min : Math.max;
        const clampedY = clamp(0, yPosition);
        const swipeStartThreshold = event.pointerType === 'touch' ? 10 : 2;
        const isAllowedToSwipe = Math.abs(clampedY) > swipeStartThreshold;
        if (isAllowedToSwipe) {
            this.toastRef().nativeElement.style.setProperty('--swipe-amount', `${yPosition}px`);
        }
        else if (Math.abs(xPosition) > swipeStartThreshold) {
            // User is swiping in wrong direction, so we disable swipe gesture
            // for the current pointer down interaction
            this.pointerStartRef = null;
        }
    }
    onCloseButtonClick() {
        if (this.disabled() || !this.toast().dismissible)
            return;
        this.deleteToast();
        this.toast().onDismiss?.(this.toast());
    }
    onCancelClick() {
        const toast = this.toast();
        if (!toast.dismissible)
            return;
        this.deleteToast();
        if (toast.cancel?.onClick) {
            toast.cancel.onClick();
        }
    }
    onActionClick(event) {
        const toast = this.toast();
        toast.action?.onClick(event);
        if (event.defaultPrevented)
            return;
        this.deleteToast();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ToastComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.1", type: ToastComponent, isStandalone: true, selector: "ngx-sonner-toast", inputs: { toast: { classPropertyName: "toast", publicName: "toast", isSignal: true, isRequired: true, transformFunction: null }, index: { classPropertyName: "index", publicName: "index", isSignal: true, isRequired: true, transformFunction: null }, expanded: { classPropertyName: "expanded", publicName: "expanded", isSignal: true, isRequired: true, transformFunction: null }, _invert: { classPropertyName: "_invert", publicName: "invert", isSignal: true, isRequired: true, transformFunction: null }, position: { classPropertyName: "position", publicName: "position", isSignal: true, isRequired: true, transformFunction: null }, visibleToasts: { classPropertyName: "visibleToasts", publicName: "visibleToasts", isSignal: true, isRequired: true, transformFunction: null }, expandByDefault: { classPropertyName: "expandByDefault", publicName: "expandByDefault", isSignal: true, isRequired: true, transformFunction: null }, _closeButton: { classPropertyName: "_closeButton", publicName: "closeButton", isSignal: true, isRequired: true, transformFunction: null }, interacting: { classPropertyName: "interacting", publicName: "interacting", isSignal: true, isRequired: true, transformFunction: null }, cancelButtonStyle: { classPropertyName: "cancelButtonStyle", publicName: "cancelButtonStyle", isSignal: true, isRequired: false, transformFunction: null }, actionButtonStyle: { classPropertyName: "actionButtonStyle", publicName: "actionButtonStyle", isSignal: true, isRequired: false, transformFunction: null }, duration: { classPropertyName: "duration", publicName: "duration", isSignal: true, isRequired: false, transformFunction: null }, descriptionClass: { classPropertyName: "descriptionClass", publicName: "descriptionClass", isSignal: true, isRequired: false, transformFunction: null }, _classes: { classPropertyName: "_classes", publicName: "classes", isSignal: true, isRequired: false, transformFunction: null }, unstyled: { classPropertyName: "unstyled", publicName: "unstyled", isSignal: true, isRequired: false, transformFunction: null }, _class: { classPropertyName: "_class", publicName: "class", isSignal: true, isRequired: false, transformFunction: null }, _style: { classPropertyName: "_style", publicName: "style", isSignal: true, isRequired: false, transformFunction: null } }, viewQueries: [{ propertyName: "toastRef", first: true, predicate: ["toastRef"], descendants: true, isSignal: true }], ngImport: i0, template: `
    <li
      #toastRef
      data-sonner-toast
      [attr.aria-live]="toast().important ? 'assertive' : 'polite'"
      aria-atomic="true"
      role="status"
      tabindex="0"
      [class]="toastClasses()"
      [attr.data-styled]="
        !(toast().component || toast().unstyled || unstyled())
      "
      [attr.data-mounted]="mounted()"
      [attr.data-promise]="!!toast().promise"
      [attr.data-removed]="removed()"
      [attr.data-visible]="isVisible()"
      [attr.data-y-position]="coords()[0]"
      [attr.data-x-position]="coords()[1]"
      [attr.data-index]="index()"
      [attr.data-front]="isFront()"
      [attr.data-swiping]="swiping()"
      [attr.data-dismissible]="toast().dismissible"
      [attr.data-type]="toastType()"
      [attr.data-invert]="invert()"
      [attr.data-swipe-out]="swipeOut()"
      [attr.data-expanded]="expanded() || (expandByDefault() && mounted())"
      [style]="toastStyle()"
      (pointerdown)="onPointerDown($event)"
      (pointerup)="onPointerUp()"
      (pointermove)="onPointerMove($event)">
      @if (closeButton() && !toast().component) {
        <button
          aria-label="Close toast"
          [attr.data-disabled]="disabled()"
          data-close-button
          (click)="onCloseButtonClick()"
          [class]="cn(classes().closeButton, toast().classes?.closeButton)">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="12"
            height="12"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
      }

      @if (toast().component) {
        <ng-container
          *ngComponentOutlet="
            toast().component | asComponent;
            inputs: toast().componentProps
          " />
      } @else {
        @if (toastType() !== 'default' || toast().icon || toast().promise) {
          <div data-icon>
            @if (toastType() === 'loading' && !toast().icon) {
              <ng-content select="[loading-icon]" />
            }
            @if (toast().icon) {
              <ng-container
                *ngComponentOutlet="
                  toast().icon | asComponent;
                  inputs: toast().componentProps
                " />
            } @else {
              @switch (toastType()) {
                @case ('success') {
                  <ng-content select="[success-icon]" />
                }
                @case ('error') {
                  <ng-content select="[error-icon]" />
                }
                @case ('warning') {
                  <ng-content select="[warning-icon]" />
                }
                @case ('info') {
                  <ng-content select="[info-icon]" />
                }
              }
            }
          </div>
        }
        <div data-content>
          @if (toast().title; as title) {
            <div
              data-title
              [class]="cn(classes().title, toast().classes?.title)">
              @if (title | isString) {
                {{ toast().title }}
              } @else {
                <ng-container
                  *ngComponentOutlet="
                    title | asComponent;
                    inputs: toast().componentProps
                  " />
              }
            </div>
          }
          @if (toast().description; as description) {
            <div
              data-description
              [class]="
                cn(
                  descriptionClass(),
                  toastDescriptionClass(),
                  classes().description,
                  toast().classes?.description
                )
              ">
              @if (description | isString) {
                {{ toast().description }}
              } @else {
                <ng-container
                  *ngComponentOutlet="
                    description | asComponent;
                    inputs: toast().componentProps
                  " />
              }
            </div>
          }
        </div>
        @if (toast().cancel; as cancel) {
          <button
            data-button
            data-cancel
            [style]="cancelButtonStyle() ?? toast().cancelButtonStyle"
            [class]="cn(classes().cancelButton, toast().classes?.cancelButton)"
            (click)="onCancelClick()">
            {{ cancel.label }}
          </button>
        }
        @if (toast().action; as action) {
          <button
            data-button
            [style]="actionButtonStyle() ?? toast().actionButtonStyle"
            [class]="cn(classes().actionButton, toast().classes?.actionButton)"
            (click)="onActionClick($event)">
            {{ action.label }}
          </button>
        }
      }
    </li>
  `, isInline: true, dependencies: [{ kind: "directive", type: NgComponentOutlet, selector: "[ngComponentOutlet]", inputs: ["ngComponentOutlet", "ngComponentOutletInputs", "ngComponentOutletInjector", "ngComponentOutletContent", "ngComponentOutletNgModule", "ngComponentOutletNgModuleFactory"] }, { kind: "pipe", type: IsStringPipe, name: "isString" }, { kind: "pipe", type: AsComponentPipe, name: "asComponent" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ToastComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-sonner-toast',
                    standalone: true,
                    imports: [NgComponentOutlet, IsStringPipe, AsComponentPipe],
                    template: `
    <li
      #toastRef
      data-sonner-toast
      [attr.aria-live]="toast().important ? 'assertive' : 'polite'"
      aria-atomic="true"
      role="status"
      tabindex="0"
      [class]="toastClasses()"
      [attr.data-styled]="
        !(toast().component || toast().unstyled || unstyled())
      "
      [attr.data-mounted]="mounted()"
      [attr.data-promise]="!!toast().promise"
      [attr.data-removed]="removed()"
      [attr.data-visible]="isVisible()"
      [attr.data-y-position]="coords()[0]"
      [attr.data-x-position]="coords()[1]"
      [attr.data-index]="index()"
      [attr.data-front]="isFront()"
      [attr.data-swiping]="swiping()"
      [attr.data-dismissible]="toast().dismissible"
      [attr.data-type]="toastType()"
      [attr.data-invert]="invert()"
      [attr.data-swipe-out]="swipeOut()"
      [attr.data-expanded]="expanded() || (expandByDefault() && mounted())"
      [style]="toastStyle()"
      (pointerdown)="onPointerDown($event)"
      (pointerup)="onPointerUp()"
      (pointermove)="onPointerMove($event)">
      @if (closeButton() && !toast().component) {
        <button
          aria-label="Close toast"
          [attr.data-disabled]="disabled()"
          data-close-button
          (click)="onCloseButtonClick()"
          [class]="cn(classes().closeButton, toast().classes?.closeButton)">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="12"
            height="12"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
      }

      @if (toast().component) {
        <ng-container
          *ngComponentOutlet="
            toast().component | asComponent;
            inputs: toast().componentProps
          " />
      } @else {
        @if (toastType() !== 'default' || toast().icon || toast().promise) {
          <div data-icon>
            @if (toastType() === 'loading' && !toast().icon) {
              <ng-content select="[loading-icon]" />
            }
            @if (toast().icon) {
              <ng-container
                *ngComponentOutlet="
                  toast().icon | asComponent;
                  inputs: toast().componentProps
                " />
            } @else {
              @switch (toastType()) {
                @case ('success') {
                  <ng-content select="[success-icon]" />
                }
                @case ('error') {
                  <ng-content select="[error-icon]" />
                }
                @case ('warning') {
                  <ng-content select="[warning-icon]" />
                }
                @case ('info') {
                  <ng-content select="[info-icon]" />
                }
              }
            }
          </div>
        }
        <div data-content>
          @if (toast().title; as title) {
            <div
              data-title
              [class]="cn(classes().title, toast().classes?.title)">
              @if (title | isString) {
                {{ toast().title }}
              } @else {
                <ng-container
                  *ngComponentOutlet="
                    title | asComponent;
                    inputs: toast().componentProps
                  " />
              }
            </div>
          }
          @if (toast().description; as description) {
            <div
              data-description
              [class]="
                cn(
                  descriptionClass(),
                  toastDescriptionClass(),
                  classes().description,
                  toast().classes?.description
                )
              ">
              @if (description | isString) {
                {{ toast().description }}
              } @else {
                <ng-container
                  *ngComponentOutlet="
                    description | asComponent;
                    inputs: toast().componentProps
                  " />
              }
            </div>
          }
        </div>
        @if (toast().cancel; as cancel) {
          <button
            data-button
            data-cancel
            [style]="cancelButtonStyle() ?? toast().cancelButtonStyle"
            [class]="cn(classes().cancelButton, toast().classes?.cancelButton)"
            (click)="onCancelClick()">
            {{ cancel.label }}
          </button>
        }
        @if (toast().action; as action) {
          <button
            data-button
            [style]="actionButtonStyle() ?? toast().actionButtonStyle"
            [class]="cn(classes().actionButton, toast().classes?.actionButton)"
            (click)="onActionClick($event)">
            {{ action.label }}
          </button>
        }
      }
    </li>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,